#!/usr/bin/python3

import asyncio
import argparse
import logging
import signal
import sys

DEFAULT_GEOMETRY = "1000x750"

log = logging.getLogger()

class Runner:
    def __init__(self, args):
        self.args = args


    @asyncio.coroutine
    def start(self):
        loop = asyncio.get_event_loop()

        future = loop.create_future()

        def _on_sigusr1():
            log.info("SIGUSR1")
            loop.remove_signal_handler(signal.SIGUSR1)
            future.set_result(True)
        loop.add_signal_handler(signal.SIGUSR1, _on_sigusr1)


        def _before_xserver():
            # This is part of the protocol for starting an X server: if the X
            # server sees that SIGUSR1 is ignored, it sends SIGUSR1 to the
            # parent process when it is ready to accept connections
            signal.signal(signal.SIGUSR1, signal.SIG_IGN)

        log.info("Starting")
        self.xserver = yield from asyncio.create_subprocess_exec(
                "Xtigervnc",
                "-geometry", self.args.geometry,
                "-desktop", self.args.title,
                "-SecurityTypes", "None",
                "-localhost",
                ":100", # TODO: generate a unique display number
                preexec_fn=_before_xserver,
                )

        log.info("Started")
        yield from future

        log.info("Ready for connections")
        yield from asyncio.sleep(3)

        log.info("Terminating")
        self.xserver.terminate()

        log.info("Waiting")
        yield from self.xserver.wait()

        log.info("Terminated")
        loop.stop()


def main():
    parser = argparse.ArgumentParser(
            description="start X client on a private X server exported via VNC on the web",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--verbose", "-v", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="debug output")
    parser.add_argument("--geometry", action="store", default=DEFAULT_GEOMETRY, help="X display geometry")
    parser.add_argument("--title", action="store", default="Desktop session", help="desktop session title")
    parser.add_argument("cmd", nargs="+", help="command and arguments to run")

    args = parser.parse_args()

    log_format = "%(asctime)-15s %(levelname)s %(message)s"
    level = logging.WARN
    if args.debug:
        level = logging.DEBUG
    elif args.verbose:
        level = logging.INFO
    logging.basicConfig(level=level, stream=sys.stderr, format=log_format)

    runner = Runner(args)

    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(runner.start())
    finally:
        loop.close()


if __name__ == "__main__":
    main()
